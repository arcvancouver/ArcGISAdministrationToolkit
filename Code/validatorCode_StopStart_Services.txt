import arcpy
import os
import sys

TBX_PATH = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, TBX_PATH)


class ToolValidator(object):
  """Class for validating a tool's parameter values and controlling
  the behavior of the tool's dialog."""

  def __init__(self):
    """Setup arcpy and the list of tool parameters."""
    self.params = arcpy.GetParameterInfo()

  def initializeParameters(self):
    """Refine the properties of a tool's parameters.  This method is
    called when the tool is opened."""
    return

  def updateParameters(self):
    """Modify the values and properties of parameters before internal
    validation is performed.  This method is called whenever a parmater
    has been changed."""

    #build up list of services
    if self.params[0].value and self.params[1].value and self.params[2].value and self.params[3].value:
      import _commonFunctions

      handler = _commonFunctions.connectionHelper(self.params[0].value, self.params[1].value, self.params[2].value, self.params[3].value)
      serverList = handler.getServiceList()

      # put the services into the value list
      if len(serverList) > 0:
        self.params[5].filter.list = serverList

    return

  def updateMessages(self):
    """Modify the messages created by internal validation for each tool
    parameter.  This method is called after internal validation."""

    self.params[0].clearMessage()
    if self.params[0].value and self.params[1].value and self.params[2].value and self.params[3].value and (self.params[5].value == ''):    #(self.params[5].value == None):
        self.params[0].setErrorMessage("No services found. Check the hostname, port or credentials")

    if self.params[5].value:
      self.params[0].clearMessage()
    return

